function getLoaderName(fileName) {
  return 'VueLoaders' + fileName
    .replace(/\..+/, '')
    .replace(/-[\w]/g, (match) => match.slice(-1).toUpperCase())
    .replace(/^\w/, (match) => match.toUpperCase());
}

function createLoaderComponent(mixin) {
  const originName = mixin.name;
  const name = getLoaderName(mixin.name);
  const component = Object.assign({
    props: {
      color: {
        type: String,
        default: '#ffffff'
      },
      scale: {
        type: [String, Number]
      }
    }
  }, mixin, {name});
  return {
    originName,
    component,
    install(Vue) {
      Vue.component(name, this.component);
    }
  }
}

function createRoot(createElement, name, scale, children) {
  return createElement(
    'div',
    {
      class: {
        'vue-loaders': true,
        [name]: true
      },
      style: {
        transform: scale !== void 0 ? `scale(${scale})` : void 0
      }
    },
    children
  );
}

function createChild(createElement, color, colorPropsOrChildren = 'background-color', children) {
  const style = {};

  if (
    Array.isArray(colorPropsOrChildren)
    && colorPropsOrChildren[0] !== void 0
    && typeof colorPropsOrChildren[0] !== 'string'
  ) {
    children = colorPropsOrChildren;
    colorPropsOrChildren = 'background-color';
  }

  if (colorPropsOrChildren) {
    if (Array.isArray(colorPropsOrChildren)) {
      for (const prop of colorPropsOrChildren) {
        style[prop] = color;
      }
    } else {
      style[colorPropsOrChildren] = color;
    }
  }

  return createElement(
    'div',
    {
      style
    },
    children
  );
}

class Loaders {
  constructor(...loaders) {
    this.loaders = {};

    loaders.forEach(loader => {
      this.loaders[loader.originName] = loader;
    });
  }

  get(name) {
    return this.loaders[name];
  }

  install(Vue) {
    const loaders = Object.values(this.loaders);
    loaders.forEach(loader => {
      loader.install(Vue);
    });
  }
}

const loaderName = 'ball-beat';

var ballbeat = createLoaderComponent({
  name: loaderName,
  render(createElement) {
    return createRoot(createElement, loaderName, this.scale, [
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color)
    ]);
  }
});

const loaderName$1 = 'ball-grid-beat';

var ballgridbeat = createLoaderComponent({
  name: loaderName$1,
  render(createElement) {
    return createRoot(createElement, loaderName$1, this.scale, [
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color)
    ]);
  }
});

const loaderName$2 = 'ball-pulse-sync';

var ballpulsesync = createLoaderComponent({
  name: loaderName$2,
  render(createElement) {
    return createRoot(createElement, loaderName$2, this.scale, [
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color)
    ]);
  }
});

const loaderName$3 = 'ball-scale-ripple';

var ballscaleripple = createLoaderComponent({
  name: loaderName$3,
  render(createElement) {
    return createRoot(createElement, loaderName$3, this.scale, [
      createChild(createElement, this.color, 'border-color')
    ]);
  }
});

const loaderName$4 = 'ball-zig-zag-deflect';

var ballzigzagdeflect = createLoaderComponent({
  name: loaderName$4,
  render(createElement) {
    return createRoot(createElement, loaderName$4, this.scale, [
      createChild(createElement, this.color),
      createChild(createElement, this.color)
    ]);
  }
});

const loaderName$5 = 'line-scale';

var linescale = createLoaderComponent({
  name: loaderName$5,
  render(createElement) {
    return createRoot(createElement, loaderName$5, this.scale, [
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color)
    ]);
  }
});

const loaderName$6 = 'line-spin-fade-loader';

var linespinfadeloader = createLoaderComponent({
  name: loaderName$6,
  render(createElement) {
    return createRoot(createElement, loaderName$6, this.scale, [
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color)
    ]);
  }
});

const loaderName$7 = 'triangle-skew-spin';

var triangleskewspin = createLoaderComponent({
  name: loaderName$7,
  render(createElement) {
    return createRoot(createElement, loaderName$7, this.scale, [
      createChild(createElement, this.color, ['border-bottom-color'])
    ]);
  }
});

const loaderName$8 = 'ball-clip-rotate';

var ballcliprotate = createLoaderComponent({
  name: loaderName$8,
  render(createElement) {
    return createRoot(createElement, loaderName$8, this.scale, [
      createChild(createElement, this.color, ['border-top-color', 'border-left-color', 'border-right-color'])
    ]);
  }
});

const loaderName$9 = 'ball-grid-pulse';

var ballgridpulse = createLoaderComponent({
  name: loaderName$9,
  render(createElement) {
    return createRoot(createElement, loaderName$9, this.scale, [
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color)
    ]);
  }
});

const loaderName$a = 'ball-rotate';

var ballrotate = createLoaderComponent({
  name: loaderName$a,
  render(createElement) {
    return createRoot(createElement, loaderName$a, this.scale, [
      createChild(createElement, this.color, [
        createChild(createElement, this.color),
        createChild(createElement, this.color)
      ])
    ]);
  }
});

const loaderName$b = 'ball-scale-ripple-multiple';

var ballscaleripplemultiple = createLoaderComponent({
  name: loaderName$b,
  render(createElement) {
    return createRoot(createElement, loaderName$b, this.scale, [
      createChild(createElement, this.color, 'border-color'),
      createChild(createElement, this.color, 'border-color'),
      createChild(createElement, this.color, 'border-color')
    ]);
  }
});

const loaderName$c = 'ball-zig-zag';

var ballzigzag = createLoaderComponent({
  name: loaderName$c,
  render(createElement) {
    return createRoot(createElement, loaderName$c, this.scale, [
      createChild(createElement, this.color),
      createChild(createElement, this.color)
    ]);
  }
});

const loaderName$d = 'line-scale-party';

var linescaleparty = createLoaderComponent({
  name: loaderName$d,
  render(createElement) {
    return createRoot(createElement, loaderName$d, this.scale, [
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color)
    ]);
  }
});

const loaderName$e = 'pacman';

var pacman = createLoaderComponent({
  name: loaderName$e,
  render(createElement) {
    return createRoot(createElement, loaderName$e, this.scale, [
      createChild(createElement, this.color, ['border-top-color', 'border-left-color', 'border-bottom-color']),
      createChild(createElement, this.color, ['border-top-color', 'border-left-color', 'border-bottom-color']),
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color)
    ]);
  }
});

const loaderName$f = 'ball-clip-rotate-multiple';

var ballcliprotatemultiple = createLoaderComponent({
  name: loaderName$f,
  render(createElement) {
    return createRoot(createElement, loaderName$f, this.scale, [
      createChild(createElement, this.color, ['border-right-color', 'border-left-color']),
      createChild(createElement, this.color, ['border-top-color', 'border-bottom-color'])
    ]);
  }
});

const loaderName$g = 'ball-pulse';

var ballpulse = createLoaderComponent({
  name: loaderName$g,
  render(createElement) {
    return createRoot(createElement, loaderName$g, this.scale, [
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color)
    ]);
  }
});

const loaderName$h = 'ball-scale';

var ballscale = createLoaderComponent({
  name: loaderName$h,
  render(createElement) {
    return createRoot(createElement, loaderName$h, this.scale, [
      createChild(createElement, this.color)
    ]);
  }
});

const loaderName$i = 'ball-spin-fade-loader';

var ballspinfadeloader = createLoaderComponent({
  name: loaderName$i,
  render(createElement) {
    return createRoot(createElement, loaderName$i, this.scale, [
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color)
    ]);
  }
});

const loaderName$j = 'cube-transition';

var cubetransition = createLoaderComponent({
  name: loaderName$j,
  render(createElement) {
    return createRoot(createElement, loaderName$j, this.scale, [
      createChild(createElement, this.color),
      createChild(createElement, this.color)
    ]);
  }
});

const loaderName$k = 'line-scale-pulse-out';

var linescalepulseout = createLoaderComponent({
  name: loaderName$k,
  render(createElement) {
    return createRoot(createElement, loaderName$k, this.scale, [
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color)
    ]);
  }
});

const loaderName$l = 'semi-circle-spin';

var semicirclespin = createLoaderComponent({
  name: loaderName$l,
  render(createElement) {
    return createRoot(createElement, loaderName$l, this.scale, [
      createElement(
        'div',
        {
          style: {
            backgroundImage: `linear-gradient(transparent 0,transparent 70%, ${this.color} 30%, ${this.color} 100%)`
          }
        }
      )
    ]);
  }
});

const loaderName$m = 'ball-clip-rotate-pulse';

var ballcliprotatepulse = createLoaderComponent({
  name: loaderName$m,
  render(createElement) {
    return createRoot(createElement, loaderName$m, this.scale, [
      createChild(createElement, this.color),
      createChild(createElement, this.color, ['border-top-color', 'border-bottom-color'])
    ]);
  }
});

const loaderName$n = 'ball-pulse-rise';

var ballpulserise = createLoaderComponent({
  name: loaderName$n,
  render(createElement) {
    return createRoot(createElement, loaderName$n, this.scale, [
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color)
    ]);
  }
});

const loaderName$o = 'ball-scale-multiple';

var ballscalemultiple = createLoaderComponent({
  name: loaderName$o,
  render(createElement) {
    return createRoot(createElement, loaderName$o, this.scale, [
      createChild(createElement, this.color)
    ]);
  }
});

const loaderName$p = 'ball-triangle-path';

var balltrianglepath = createLoaderComponent({
  name: loaderName$p,
  render(createElement) {
    return createRoot(createElement, loaderName$p, this.scale, [
      createChild(createElement, this.color, 'border-color'),
      createChild(createElement, this.color, 'border-color'),
      createChild(createElement, this.color, 'border-color')
    ]);
  }
});

const loaderName$q = 'line-scale-pulse-out-rapid';

var linescalepulseoutrapid = createLoaderComponent({
  name: loaderName$q,
  render(createElement) {
    return createRoot(createElement, loaderName$q, this.scale, [
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color),
      createChild(createElement, this.color)
    ]);
  }
});

const loaderName$r = 'square-spin';

var squarespin = createLoaderComponent({
  name: loaderName$r,
  render(createElement) {
    return createRoot(createElement, loaderName$r, this.scale, [
      createChild(createElement, this.color)
    ]);
  }
});

var loadersContainer = new Loaders(
  ballbeat,
  ballgridbeat,
  ballpulsesync,
  ballscaleripple,
  ballzigzagdeflect,
  linescale,
  linespinfadeloader,
  triangleskewspin,
  ballcliprotate,
  ballgridpulse,
  ballrotate,
  ballscaleripplemultiple,
  ballzigzag,
  linescaleparty,
  pacman,
  ballcliprotatemultiple,
  ballpulse,
  ballscale,
  ballspinfadeloader,
  cubetransition,
  linescalepulseout,
  semicirclespin,
  ballcliprotatepulse,
  ballpulserise,
  ballscalemultiple,
  balltrianglepath,
  linescalepulseoutrapid,
  squarespin,
);

const component = {
  props: {
    name: {
      type: String,
      required: true
    },
    color: {
      type: String,
      default: '#ffffff'
    },
    scale: {
      type: [Number, String]
    }
  },
  render(createElement) {
    const loader = loadersContainer.get(this.name);

    if (loader) {
      const context = {
        color: this.color,
        scale: this.scale
      };

      return loader.component.render.call(context, createElement);
    }

    console.warn(
      'Unsupported loader name '
      + '"' + this.name + '".'
      + 'See https://github.com/Hokid/vue-loaders#loaders'
    );

    return null;
  }
};

var index = {
  component,
  install(Vue) {
    Vue.component('vue-loaders', component);
    loadersContainer.install(Vue);
  }
};

export default index;
